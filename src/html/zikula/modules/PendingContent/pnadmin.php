<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: pnadmin.php 26422 2009-08-28 15:29:44Z drak $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage PendingContent
 */

/**
 * the main administration function
 *
 * @author Hartmut Koenig
 * @return string HTML string
 */
function pendingcontent_admin_main()
{
    // Security check
    if (!SecurityUtil::checkPermission('PendingContent::Item', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = & pnRender::getInstance('PendingContent', false);

    // Return the output that has been generated by this function
    return $pnRender->fetch('pendingcontent_admin_main.htm');
}

/**
 * add new item
 *
 * @author Hartmut Koenig
 * @return string HTML string
 */
function pendingcontent_admin_new()
{
    // Security check
    if (!SecurityUtil::checkPermission('PendingContent::Item', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = & pnRender::getInstance('PendingContent', false);

    // Return the output that has been generated by this function
    return $pnRender->fetch('pendingcontent_admin_new.htm');
}

/**
 * Create item
 *
 * @param 'pendingcontent['name']' the name of the pending rule to be created
 * @param 'pendingcontent['sql']' the sql string to get pending items
 * @param 'pendingcontent['url']' the url of the target modules admin panel
 * @author Hartmut Koenig
 * @return string HTML string
 */
function pendingcontent_admin_create($args)
{
    // get translation domain for this module
    $dom = ZLanguage::getModuleDomain('PendingContent');

    // Get parameters from whatever input we need
    $pendingcontent = FormUtil::getPassedValue('pendingcontent', isset($args['pendingcontent']) ? $args['pendingcontent'] : null, 'POST');

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('PendingContent', 'admin', 'view'));
    }

    // Notable by its absence there is no security check here

    // Create the new item
    $pid = pnModAPIFunc('PendingContent', 'admin', 'create',
                        array('name' => $pendingcontent['name'],
                              'sql'  => $pendingcontent['sql'],
                              'url'  => $pendingcontent['url']));

    // The return value of the function is checked
    if ($pid != false) {
        // Success
        LogUtil::registerStatus (__('Element created', $dom));
    }

    return pnRedirect(pnModURL('PendingContent', 'admin', 'view'));
}

/**
 * modify an item
 *
 * @param 'pid' the id of the item to be modified
 */
function pendingcontent_admin_modify($args)
{
    // get translation domain for this module
    $dom = ZLanguage::getModuleDomain('PendingContent');

    // Get parameters from whatever input we need
    $pid = FormUtil::getPassedValue('pid', isset($args['pid']) ? $args['pid'] : null, 'GET');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');

    if (!empty($objectid)) {
        $pid = $objectid;
    }

    // Create output object
    $pnRender = & pnRender::getInstance('PendingContent', false);

    // Get the item
    $item = pnModAPIFunc('PendingContent', 'user', 'get', array('pid' => $pid));
    if ($item == false) {
        return LogUtil::registerError (__('No such item found.', $dom), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission('PendingContent::Item', "$item[name]::$pid", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Assign the item
    $pnRender->assign($item);

    // Return the output that has been generated by this function
    return $pnRender->fetch('pendingcontent_admin_modify.htm');
}

/**
 * Update item
 *
 * @param 'pendingcontent['pid']' the id of the item to be updated
 * @param 'pendingcontent['name']' the name of the pending rule to be created
 * @param 'pendingcontent['sql']' the sql string to get pending items
 * @param 'pendingcontent['url']' the url of the target modules admin panel
 */
function pendingcontent_admin_update($args)
{
    // get translation domain for this module
    $dom = ZLanguage::getModuleDomain('PendingContent');

    // Get parameters from whatever input we need
    $pendingcontent = FormUtil::getPassedValue('pendingcontent', isset($args['pendingcontent']) ? $args['pendingcontent'] : null, 'POST');
    if (!empty($pendingcontent['objectid'])) {
        $pendingcontent['pid'] = $pendingcontent['objectid'];
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('PendingContent', 'admin', 'view'));
    }

    // Notable by its absence there is no security check here

    // Update the item
    if (pnModAPIFunc('PendingContent', 'admin', 'update',
                     array('pid' => $pendingcontent['pid'],
                           'name' => $pendingcontent['name'],
                           'sql' => $pendingcontent['sql'],
                           'url' => $pendingcontent['url']))) {
        // Success
        LogUtil::registerStatus (__('Element updated', $dom));
    }

    return pnRedirect(pnModURL('PendingContent', 'admin', 'view'));
}

/**
 * delete item
 *
 * @param 'pid' the id of the item to be deleted
 * @param 'confirmation' confirmation that this item can be deleted
 */
function pendingcontent_admin_delete($args)
{
    // get translation domain for this module
    $dom = ZLanguage::getModuleDomain('PendingContent');

    $pid = FormUtil::getPassedValue('pid', isset($args['pid']) ? $args['pid'] : null, 'REQUEST');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
    if (!empty($objectid)) {
        $pid = $objectid;
    }

    // Get the item
    $item = pnModAPIFunc('PendingContent', 'user', 'get', array('pid' => $pid));
    if ($item == false) {
        return DataUtil::formatForDisplayHTML(__('Element not found', $dom));
    }

    // Security check
    if (!SecurityUtil::checkPermission('PendingContent::Item', "$item[name]::$pid", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet

        // Create output object
        $pnRender = & pnRender::getInstance('PendingContent', false);

        // Add a hidden field for the item ID to the output
        $pnRender->assign('pid', $pid);

        // Return the output that has been generated by this function
        return $pnRender->fetch('pendingcontent_admin_delete.htm');

    }

    // If we get here it means that the user has confirmed the action

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('PendingContent', 'admin', 'view'));
    }

    // Delete item
    if (pnModAPIFunc('PendingContent', 'admin', 'delete',
                     array('pid' => $pid))) {
        // Success
        LogUtil::registerStatus (__('Element deleted', $dom));
    }

    return pnRedirect(pnModURL('PendingContent', 'admin', 'view'));
}

/**
 * view items
 */
function pendingcontent_admin_view()
{
    // get translation domain for this module
    $dom = ZLanguage::getModuleDomain('PendingContent');

    // Security Check
    if (!SecurityUtil::checkPermission('PendingContent::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');

    // Create output object
    $pnRender = & pnRender::getInstance('PendingContent', false);

    // Get the matching items
    $items = pnModAPIFunc('PendingContent', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => pnModGetVar('PendingContent','itemsperpage')));

    // loop through each item to build the avialable options
    $pendingitems = array();
    foreach ($items as $item) {
        if (SecurityUtil::checkPermission('PendingContent::', "$item[name]::$item[pid]", ACCESS_READ)) {

            // Options for the item
            $options = array();
            if (SecurityUtil::checkPermission('PendingContent::', "$item[name]::$item[pid]", ACCESS_EDIT)) {
                $options[] = array('url' => pnModURL('PendingContent', 'admin', 'modify', array('pid' => $item['pid'])),
                                   'image' => 'xedit.gif',
                                   'title' => __('Edit', $dom));
                if (SecurityUtil::checkPermission('PendingContent::', "$item[name]::$item[pid]", ACCESS_DELETE)) {
                    $options[] = array('url' => pnModURL('PendingContent', 'admin', 'delete', array('pid' => $item['pid'])),
                                       'image' => '14_layer_deletelayer.gif',
                                       'title' => __('Delete', $dom));
                }
            }
            $item['options'] = $options;
            $pendingitems[] = $item;
        }
    }

    // assign the items to the array
    $pnRender->assign('pendingitems', $pendingitems);

    // assign the values for the smarty plugin to produce a pager
    $pnRender->assign('pager', array('numitems' => pnModAPIFunc('PendingContent', 'user', 'countitems'),
                                     'itemsperpage' => pnModGetVar('PendingContent','itemsperpage')));

    // Return the output that has been generated by this function
    return $pnRender->fetch('pendingcontent_admin_view.htm');
}


/**
 * This is a standard function to modify the configuration parameters of the
 * module
 */
function pendingcontent_admin_modifyconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('PendingContent::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = & pnRender::getInstance('PendingContent', false);

    // assign the module vars
    $pnRender->assign(pnModGetVar('PendingContent'));

    // Return the output that has been generated by this function
    return $pnRender->fetch('pendingcontent_admin_modifyconfig.htm');
}

/**
 * This is a standard function to update the configuration parameters of the
 * module given the information passed back by the modification form
 */
function pendingcontent_admin_updateconfig()
{
    // get translation domain for this module
    $dom = ZLanguage::getModuleDomain('PendingContent');

    // Security check
    if (!SecurityUtil::checkPermission('PendingContent::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('PendingContent', 'admin', 'view'));
    }

    // Update module variables
    $itemsperpage = FormUtil::getPassedValue('itemsperpage', 10, 'POST');
    pnModSetVar('PendingContent', 'itemsperpage', $itemsperpage);

    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module', 'updateconfig', 'PendingContent', array('module' => 'PendingContent'));

    // the module configuration has been updated successfuly
    LogUtil::registerStatus (__('Done! Module configuration updated.', $dom));

    return pnRedirect(pnModURL('PendingContent', 'admin', 'view'));
}
