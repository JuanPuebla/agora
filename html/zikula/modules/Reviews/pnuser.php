<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: pnuser.php 388 2009-12-11 03:53:37Z mateo $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage Reviews
 */

/**
 * the main user function
 *
 * @param integer startnum starting number of the page
 * @return string HTML output
 */
function Reviews_user_main()
{
    // Security check
    if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_OVERVIEW)) {
        return LogUtil::registerPermissionError();
    }

    // Get parameters from whatever input we need
    $startnum = (int)FormUtil::getPassedValue('startnum', 1, 'REQUEST');

    // get all module vars for later use
    $modvars = pnModGetVar('Reviews');

    // Get all matching reviews
    $recentitems = pnModAPIFunc('Reviews', 'user', 'getall',
                                array('startnum' => $startnum,
                                      'orderby' => 'cr_date DESC',
                                      'numitems' => 10));
    // get the most popular reviews
    $popularitems = pnModAPIFunc('Reviews', 'user', 'getall',
                                 array('startnum' => $startnum,
                                       'orderby' => 'hits DESC',
                                       'numitems' => 10));

    // create output object
    $render = & pnRender::getInstance('Reviews');

    // load the categories system
    if ($modvars['enablecategorization']) {
        if (!Loader::loadClass('CategoryUtil') || !Loader::loadClass('CategoryRegistryUtil')) {
            pn_exit(__f('Error! Unable to load class [%s%]', 'CategoryUtil | CategoryRegistryUtil', $dom));
        }
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Reviews', 'reviews');
        $categories = array();
        $ak = array_keys($catregistry);
        foreach ($ak as $k) {
            $categories[$k] = CategoryUtil::getCategoryByID($catregistry[$k]);
            $categories[$k]['path'] .= '/';
            $categories[$k]['subcategories'] = CategoryUtil::getCategoriesByParentID($catregistry[$k]);
        }
        $render->assign('categories', $categories);
    }

    // assign item arrays to template
    $render->assign('lang', ZLanguage::getLanguageCode());
    $render->assign($modvars);
    $render->assign('shorturls',      pnConfigGetVar('shorturls'));
    $render->assign('shorturlstype',  pnConfigGetVar('shorturlstype'));
    $render->assign('recentreviews',  $recentitems);
    $render->assign('popularreviews', $popularitems);

    // Return the output that has been generated by this function
    return $render->fetch('reviews_user_main.htm');
}

/**
 * add new item
 *
 * @return string HTML output
 */
function Reviews_user_new()
{
    // Security chec
    if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $render = & pnRender::getInstance('Reviews');

    // get module vars for later use
    $modvars = pnModGetVar('Reviews');

    if ($modvars['enablecategorization']) {
        // load the category registry util
        if (!Loader::loadClass('CategoryRegistryUtil')) {
            pn_exit (__f('Error! Unable to load class [%s%]', 'CategoryRegistryUtil', $dom));
        }
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Reviews', 'reviews');

        $render->assign('categories', $catregistry);
    }

    // Assign the default language and module config
    $render->assign('lang', ZLanguage::getLanguageCode());
    $render->assign($modvars);

    // get the type parameter so we can decide what template to use
    $type = FormUtil::getPassedValue('type', 'user', 'REQUEST');

    // Return the output that has been generated by this function
    if (strtolower($type) == 'admin') {
        return $render->fetch('reviews_admin_new.htm');
    } else {
        return $render->fetch('reviews_user_new.htm');
    }
}

/**
 * create review
 */
function Reviews_user_create($args)
{
    // Get parameters from whatever input we need
    $review = FormUtil::getPassedValue('review', isset($args['review']) ? $args['review'] : null, 'POST');

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError(pnModURL('Reviews', 'user', 'view'));
    }

    $dom = ZLanguage::getModuleDomain('Reviews');

    // Notable by its absence there is no security check here
    // create the review
    $id = pnModAPIFunc('Reviews', 'user', 'create', $review);
    if ($id != false) {
        // Success
        LogUtil::registerStatus(__('Done! Review created', $dom));
    }

    // get and redirect to the right place
    $referer = pnServerGetVar('HTTP_REFERER');
    if (stristr($referer, 'type=admin')) {
        return pnRedirect(pnModURL('Reviews', 'admin', 'view'));
    } else {
        return pnRedirect(pnModURL('Reviews', 'user', 'view'));
    }
}

/**
 * view items
 *
 * @return string HTML output
 */
function Reviews_user_view()
{
    // Security check
    if (!SecurityUtil::checkPermission('Reviews::', '::', ACCESS_OVERVIEW)) {
        return LogUtil::registerPermissionError();
    }

    // Get parameters from whatever input we need
    $cat    = (string)FormUtil::getPassedValue('cat', isset($args['cat']) ? $args['cat'] : null, 'GET');
    $prop   = (string)FormUtil::getPassedValue('prop', isset($args['prop']) ? $args['prop'] : null, 'GET');
    $letter = (string)FormUtil::getPassedValue('letter', null, 'REQUEST');
    $page   = (int)FormUtil::getPassedValue('page', isset($args['page']) ? $args['page'] : 1, 'GET');

    $dom = ZLanguage::getModuleDomain('Reviews');

    // get all module vars for later use
    $modvars = pnModGetVar('Reviews');

    // defaults and input validation
    if (!is_numeric($page) || $page < 0) {
        $page = 1;
    }
    $startnum = (($page - 1) * $modvars['itemsperpage']) + 1;

    // check if categorisation is enabled
    if ($modvars['enablecategorization']) {
        if (!Loader::loadClass('CategoryUtil') || !Loader::loadClass('CategoryRegistryUtil')) {
            pn_exit(__f('Error! Unable to load class [%s%]', 'CategoryUtil | CategoryRegistryUtil', $dom));
        }
        // get the categories registered for Reviews
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Reviews', 'reviews');
        $properties = array_keys($catregistry);

        // validate the property
        // and build the category filter - mateo
        if (!empty($properties) && in_array($prop, $properties)) {
            // if the property and the category are specified
            // means that we'll list the reviews that belongs to that category
            if (!empty($cat)) {
                if (!is_numeric($cat)) {
                    $rootCat = CategoryUtil::getCategoryByID($catregistry[$prop]);
                    $cat = CategoryUtil::getCategoryByPath($rootCat['path'].'/'.$cat);
                } else {
                    $cat = CategoryUtil::getCategoryByID($cat);
                }
                if (!empty($cat) && isset($cat['path'])) {
                    // include all it's subcategories and build the filter
                    $categories = categoryUtil::getCategoriesByPath($cat['path'], '', 'path');
                    $catstofilter = array();
                    foreach ($categories as $category) {
                        $catstofilter[] = $category['id'];
                    }
                    $catFilter = array($prop => $catstofilter); 
                } else {
                    LogUtil::registerError(__('Invalid category passed.', $dom));
                }
            }
        }
    }

    // Get all matching reviews
    $items = pnModAPIFunc('Reviews', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => $modvars['itemsperpage'],
                                'letter'   => $letter,
                                'category' => isset($catFilter) ? $catFilter : null,
                                'catregistry' => isset($catregistry) ? $catregistry : null));

    // Create output object
    $render = & pnRender::getInstance('Reviews');

    // assign all the necessary template variables
    $render->assign('items', $items);
    $render->assign('category', $cat);
    $render->assign('lang', ZLanguage::getLanguageCode());
    $render->assign($modvars);
    $render->assign('shorturls', pnConfigGetVar('shorturls'));
    $render->assign('shorturlstype', pnConfigGetVar('shorturlstype'));

    // Assign the values for the smarty plugin to produce a pager
    $render->assign('pager', array('numitems' => pnModAPIFunc('Reviews', 'user', 'countitems',
                                                              array('letter' => $letter,
                                                                    'category' => isset($catFilter) ? $catFilter : null)),
                                   'itemsperpage' => $modvars['itemsperpage']));

    // Return the output that has been generated by this function
    return $render->fetch('reviews_user_view.htm');
}

/**
 * display item
 *
 * @return string HTML output
 */
function Reviews_user_display($args)
{
    $id       = FormUtil::getPassedValue('id', isset($args['id']) ? $args['id'] : null, 'REQUEST');
    $title    = FormUtil::getPassedValue('title', isset($args['title']) ? $args['title'] : null, 'REQUEST');
    $page     = FormUtil::getPassedValue('page', isset($args['page']) ? $args['page'] : 1, 'REQUEST');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    if (!empty($objectid)) {
        $id = $objectid;
    }

    // Validate the essential parameters
    if ((empty($id) || !is_numeric($id)) && empty($title)) {
        return LogUtil::registerArgsError();
    }
    if (!empty($title)) {
        unset($id);
    }

    $dom = ZLanguage::getModuleDomain('Reviews');

    // increment the read count
    if ($page == 1) {
        if (isset($id)) {
            pnModAPIFunc('Reviews', 'user', 'incrementreadcount', array('id' => $id));
        } else {
            pnModAPIFunc('Reviews', 'user', 'incrementreadcount', array('title' => $title));
        }
    }

    // Create output object
    $render = & pnRender::getInstance('Reviews');

    // set the cache id
    if (isset($id)) {
        $render->cache_id = $id.$page;
    } else {
        $render->cache_id = $title.$page;
    }

    // check if the contents are cached.
    if ($render->is_cached('reviews_user_display.htm')) {
        return $render->fetch('reviews_user_display.htm');
    }

    // Get the review
    if (isset($id) && is_numeric($id)) {
        $item = pnModAPIFunc('Reviews', 'user', 'get', array('id' => $id));
    } else {
        $item = pnModAPIFunc('Reviews', 'user', 'get', array('title' => $title));
        pnQueryStringSetVar('id', $item['id']);
    }

    if ($item === false) {
        return LogUtil::registerError(__('No such review found.', $dom), 404);
    }

    // Explode the review into an array of seperate pages
    $allpages = explode('<!--pagebreak-->', $item['text']);
    unset($item['text']);

    // Set the item review to be the required page
    // nb arrays start from zero pages from one
    // check if the page does exists
    if (!isset($allpages[$page-1])) {
        return LogUtil::registerError(__('No such review page found.', $dom), 404);
    }
    $item['text'] = $allpages[$page-1];
    $numpages = count($allpages);
    unset($allpages);

    if (!preg_match("/([\<])([^\>]{1,})*([\>])/i", $item['text'])) {
        $item['text'] = nl2br(trim($item['text']));
    }

    // Assign the item to the template
    $render->assign($item);

    // Now lets assign the informatation to create a pager for the review
    $render->assign('pager', array('numitems'     => $numpages,
                                   'itemsperpage' => 1));

    // Return the output that has been generated by this function
    return $render->fetch('reviews_user_display.htm');
}
